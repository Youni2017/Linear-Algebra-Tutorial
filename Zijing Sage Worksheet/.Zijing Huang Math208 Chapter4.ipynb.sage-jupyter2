{"backend_state":"ready","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-32c41ac9-3ec5-45a2-a3e6-3820fe350794.json","kernel":"sage-10.1","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"last_ipynb_save":1709865801383,"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":2},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython2","version":"2.7.12+"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1709335697442,"exec_count":1,"id":"316264","input":"# Define a 3-dimensional vector space\nV = VectorSpace(RR, 3)\n\n# Define a subspace by providing basis\nS = V.subspace([V([-3, 1, 0]),V([1, -5, 0])])\n\n# Check definition 1: The subspace must contain the zero vector\nhas_zero_vector = zero_vector(V.dimension()) in S\nprint(\"Definition 1 - contains zero vectors:\", has_zero_vector)\n\n# Check definition 2: The subspace is closed under addition\nu = vector(QQ, [1, 2, 0])\nv = vector(QQ, [2, 0, 0])\nprint(\"Whether u in S:\", u in S)\nprint(\"Whether v in S:\", v in S)\nprint(\"Definition 2 - closed under addition:\", (u + v) in S)\n\n# Check definition 3: The subspace is closed under scalarxxxx\nc = 2.2\nprint(\"Definition 3 - closed under multiplicity:\", (c * u) in S)\n\n# Whether the output is a subspace \nprint(\"Whether the output is a subspace：\", has_zero_vector and (u + v) in S and (c * u) in S)\n\n# Example of a vector w that does is **not** in S.\nw = vector(QQ, [2, 2, 1])\nprint(\"Whether w in S:\", w in S)","kernel":"sage-10.2","output":{"0":{"name":"stdout","text":"Definition 1 - contains zero vectors: True\nWhether u in S: True\nWhether v in S: True\nDefinition 2 - closed under addition: True\nDefinition 3 - closed under multiplicity: True\nWhether the output is a subspace： True\nWhether w in S: False\n"}},"pos":4,"start":1709335697168,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"0b0338","input":"<span style='font-size:large'>Let </span><span style='font-size:large'>_B_</span><span style='font-size:large'> = {</span>$u_1$<span style='font-size:large'>, ..., </span>$u_m$<span style='font-size:large'>} be a basis for a subspace S. For every vector </span><span style='font-size:large'>**s**</span><span style='font-size:large'> in S there exists a unique set of scalars </span>$s_1$<span style='font-size:large'>, ..., </span>$s_m$<span style='font-size:large'> such that</span>\n\n<span style='font-size:large'>S = $s_1$$u_1$ + ... + $s_m$$u_m$</span>\n\n","pos":13.5,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"122bd4","input":"<span style='font-size:large'>Let A be an n × m matrix and </span><span style='font-size:large'>**b**</span><span style='font-size:large'> a vector in </span>$\\mathbb{R}^n$<span style='font-size:large'>.</span>\n\n<span style='font-size:large'>\\(a\\) The system A</span><span style='font-size:large'>**x**</span><span style='font-size:large'> = </span><span style='font-size:large'>**b**</span><span style='font-size:large'> is consistent if and only if </span><span style='font-size:large'>**b**</span><span style='font-size:large'> is in the column space of A.</span>\n\n<span style='font-size:large'>\\(b\\) The system A</span><span style='font-size:large'>**x**</span><span style='font-size:large'> = </span><span style='font-size:large'>**b**</span><span style='font-size:large'> has a unique solution if and only if </span><span style='font-size:large'>**b**</span><span style='font-size:large'> is in the column space of A and the columns of A are linearly independent.</span>\n","pos":16.75,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"13bda6","input":"<span style='font-size:large'>Let </span><span style='font-size:large'>_A_</span><span style='font-size:large'> and </span><span style='font-size:large'>_B_</span><span style='font-size:large'> be equivalent matrices. Then the subspace spanned by the rows of </span><span style='font-size:large'>_A_</span><span style='font-size:large'> is the same as the subspace spanned by the rows of </span><span style='font-size:large'>_B_</span><span style='font-size:large'>.</span>\n\n","pos":13.75,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"1914df","input":"<span style='font-size:x-large'>Basis</span>\n\n<span style='font-size:large'>A set </span><span style='font-size:large'>_B_</span><span style='font-size:large'> = {u1, ... , um} is a basis for a subspace S if</span>\n\n<span style='font-size:large'>\\(a\\) </span><span style='font-size:large'>_B_</span><span style='font-size:large'> spans S.</span>\n\n<span style='font-size:large'>\\(b\\) </span><span style='font-size:large'>_B_</span><span style='font-size:large'> is linearly independent.</span>\n\n","pos":13,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"1c1220","input":"<span style='font-size:large'>Ex. Suppose that T : </span>$\\mathbb{R_2}$<span style='font-size:large'>  → </span>$\\mathbb{R_3}$<span style='font-size:large'> is defined by</span> \\begin{align*}T\\begin{pmatrix}\\begin{bmatrix} x_1\\\\x_2 \\end{bmatrix}\\end{pmatrix}=\\begin{bmatrix}x_1-2x_2\\\\-3x_1+6x_2\\\\2x_1-4x_2\\end{bmatrix}\\end{align*}\n<span style='font-size:large'>Find ker\\(T\\) and range\\(T\\).</span>\n","pos":10.375,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"281b90","input":"<span style='font-size:large'>Summarizing this method: To find a basis for </span><span style='font-size:large'>_S_</span><span style='font-size:large'> = span{</span>$u_1$<span style='font-size:large'>, ...., </span>$u_m$<span style='font-size:large'>},</span>\n\n<span style='font-size:large'>\\(a\\) Use the vectors </span>$u_1$<span style='font-size:large'>, ...., </span>$u_m$<span style='font-size:large'> to form the rows of a matrix </span><span style='font-size:large'>_A_</span><span style='font-size:large'>.</span>\n\n<span style='font-size:large'>\\(b\\) Transform </span><span style='font-size:large'>_A_</span><span style='font-size:large'> to echelon form </span><span style='font-size:large'>_B_</span><span style='font-size:large'>.</span>\n\n<span style='font-size:large'>\\(c\\) The nonzero rows of </span><span style='font-size:large'>_B_</span><span style='font-size:large'> give a basis for S.</span>\n","pos":14.375,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"3745d5","input":"<span style='font-size:x-large'>Find relationship between quiver matrix and null space.</span>\n","pos":28.125,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"381d6f","input":"<span style='font-size:large'>Summarizing this method: To find a basis for </span><span style='font-size:large'>_S_</span><span style='font-size:large'> = span{</span>$u_1$<span style='font-size:large'>, ..., </span>$u_m$<span style='font-size:large'>},</span>\n\n<span style='font-size:large'>\\(a\\) Use the vectors </span>$u_1$<span style='font-size:large'>, ..., </span>$u_m$<span style='font-size:large'> to form the rows of a matrix </span><span style='font-size:large'>_A_</span><span style='font-size:large'>.</span>\n\n<span style='font-size:large'>\\(b\\) Transform </span><span style='font-size:large'>_A_</span><span style='font-size:large'> to echelon form </span><span style='font-size:large'>_B_</span><span style='font-size:large'>.</span>\n\n<span style='font-size:large'>\\(c\\) The nonzero rows of </span><span style='font-size:large'>_B_</span><span style='font-size:large'> give a basis for S.</span>\n","pos":14.8125,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"3e5598","input":"<span style='font-size:large'>Ex. Expand the set </span><img src=\".Zijing Huang Math208 Chapter4.ipynb.upload/paste-0.530779031647397\"   width=\"144.965px\"  height=\"68.971px\"  style=\"object-fit:cover\"/><span style='font-size:large'> to a basis for </span>$R^3$<span style='font-size:large'>.</span>\n","pos":14.953125,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"408e64","input":"<span style='font-size:large'>Suppose that $S_1$ and $S_2$ are both subspaces of </span>$\\mathbb{R}^3$<span style='font-size:large'> and that </span>$S_1$<span style='font-size:large'> is a subset of </span>$S_2$<span style='font-size:large'>. Then dim\\(</span>$S_1$<span style='font-size:large'>\\) ≤ dim\\(</span>$S_2$<span style='font-size:large'>\\), and dim\\(</span>$S_1$<span style='font-size:large'>\\) = dim\\(</span>$S_2$<span style='font-size:large'>\\) only if </span>$S_1$<span style='font-size:large'> = </span>$S_2$.\n\n","pos":14.998046875,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"4108b4","input":"<span style='font-size:large'>The rank of a matrix A is the dimension of the row \\(or column\\) space of A, and is denoted by rank\\(A\\).</span>\n","pos":15.75,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"471fd9","input":"<span style='font-size:xx-large'>Thank you!</span>\n","pos":32.125,"type":"cell"}
{"cell_type":"markdown","id":"4c450f","input":"<span style='font-size:large'>Ex. Suppose that T : </span>$R_{2}$<span style='font-size:large'>  → </span>$R_{3}$<span style='font-size:large'> is defined by</span><img src=\".Zijing Huang Math208 Chapter4.ipynb.upload/paste-0.544029370466121\"   width=\"248.321px\"  height=\"93.3228px\"  style=\"object-fit:cover\"/>\n\n<span style='font-size:large'>Find ker\\(T\\) and range\\(T\\).</span>\n\n","pos":10.75,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"591d4e","input":"<span style='font-size:large'>We have 4 points, and there are some arrows between them. By using Quiver Mutation, we can find the final format.</span>\n\n<img src=\".Zijing Huang Math208 Chapter4.ipynb.upload/paste-0.4188275615061243\"   width=\"1032.47px\"  height=\"243.663px\"  style=\"object-fit:cover\"/>\n\n<span style='font-size:large'>Then we want to express them into Quiver Matrix by these following theorem:</span>\n\n\\begin{align*}b_{ij} =\\begin{cases}\n    -b_{ij} \\text{ , if i = k or j = k} \\\\\n    b_{ij} + b_{ik} * b_{kj} \\text{ , if $b_{ik}$, $b_{kj}$ > 0} \\\\\n    b_{ij} \\text{ , otherwise}\n\\end{cases}\\end{align*}\n\n","pos":27.75,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"5e2754","input":"<span style='font-size:large'>For any matrix A, the dimension of the row space equals the dimension of the column space.</span>\n","pos":15.625,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"65fe69","input":"<span style='font-size:large'>This is a 3 cyclic quiver matrix, and its null space has nonzero vectors.</span>\n","pos":28.75,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"792cd3","input":"<span style='font-size:large'>Suppose that </span>$\\mathscr{B}_1 = \\left\\{ \\begin{bmatrix}1 \\\\ 3 \\end{bmatrix}, \\begin{bmatrix}2 \\\\ 7\\end{bmatrix} \\right\\}$<span style='font-size:large'> and </span>$\\mathscr{B}_2 = \\left\\{ \\begin{bmatrix}3 \\\\ 5 \\end{bmatrix}, \\begin{bmatrix}2 \\\\ 3\\end{bmatrix} \\right\\}$.\n\n<span style='font-size:large'>Find </span>$[x]_{\\mathscr{B}_2}$<span style='font-size:large'> if </span>$[x]_{\\mathscr{B}_1} = \\left\\{ \\begin{bmatrix}-1 \\\\ 4 \\end{bmatrix} \\right\\}$.\n\n","pos":22.25,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"7ab021","input":"<span style='font-size:large'>If 0 is not in a subset S, then S is not a subspace.</span>\n","pos":3,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"7c76e3","input":"<span style='font-size:large'>Let </span><span style='font-size:large'>_𝒰_</span><span style='font-size:large'> = {</span>$u_1$<span style='font-size:large'>, ..., </span>$u_m$<span style='font-size:large'>} be a set of m vectors in a subspace </span><span style='font-size:large'>_S_</span><span style='font-size:large'> of dimension m. If </span><span style='font-size:large'>_𝒰_</span><span style='font-size:large'> is either linearly independent or spans </span><span style='font-size:large'>_S_</span><span style='font-size:large'>, then </span><span style='font-size:large'>_𝒰_</span><span style='font-size:large'> is a basis for </span><span style='font-size:large'>_S_</span><span style='font-size:large'>.</span>\n","pos":14.984375,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"82a078","input":"<span style='font-size:large'>Suppose that </span><span style='font-size:large'>_U_</span><span style='font-size:large'> = \\[</span>$u_1$<span style='font-size:large'> … </span>$u_m$<span style='font-size:large'>\\] and </span><span style='font-size:large'>_V_</span><span style='font-size:large'> = \\[</span>$v_1$<span style='font-size:large'> … </span>$v_m$<span style='font-size:large'>\\] are two equivalent matrices. Then any linear dependence that exists among the vectors </span>$u_1$<span style='font-size:large'>, … , </span>$u_m$<span style='font-size:large'> also exists among the vectors </span>$v_1$<span style='font-size:large'>, … , </span>$v_m$<span style='font-size:large'>.</span>\n\n","pos":13.625,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"90f38e","input":"<span style='font-size:x-large'>Quiver Mutation</span>\n\n1. <span style='font-size:large'>For each i → k→ j, make new edges i → j</span>\n2. <span style='font-size:large'>Reverse all edges at k</span>\n3. <span style='font-size:large'>Remove any 2\\-cycles</span>\n\n","pos":27.5,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"9b4889","input":"<span style='font-size:large'>This is a 3 cyclic quiver matrix, but its null space only have zero vector.</span>\n","pos":29.5,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"9cc3ff","input":"<span style='font-size:x-large'>Null space</span>\n\n<span style='font-size:large'>If A is an n × m matrix, then the set of solutions to the homogeneous linear system A</span><span style='font-size:large'>**x**</span><span style='font-size:large'> = 0 forms a subspace of </span>$R_{m}$<span style='font-size:large'>.</span>\n\n<span style='font-size:large'>If A is an n × m matrix, then the set of solutions to A</span><span style='font-size:large'>**x**</span><span style='font-size:large'> = 0 is called the null space of A and is denoted by null\\(A\\).</span>\n\n<span style='font-size:large'>Let T</span> : $R_{m}$ <span style='font-size:large'>→ </span>$R_{n}$ <span style='font-size:large'>be a linear transformation. Then the kernel of T is a subspace of the domain </span>$R_{m}$ <span style='font-size:large'> and the range of T is a subspace of the codomain </span>$R_{n}$<span style='font-size:large'>.</span>\n\n<span style='font-size:large'>ker\\(T\\) = null\\(A\\)</span>\n\n","pos":9,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"9e39f0","input":"<span style='font-size:x-large'>Change of Basis in Subspaces</span>\n\n<span style='font-size:large'>Let S be a subspace of </span>$\\mathbb{R}^n$<span style='font-size:large'> with bases </span>$\\mathscr{B}_1$<span style='font-size:large'> = {</span>$u_1$<span style='font-size:large'>, ..., </span>$u_m$<span style='font-size:large'>} and </span>$\\mathscr{B}_2$<span style='font-size:large'> = {</span>$v_1$<span style='font-size:large'>, ..., </span>$v_m$<span style='font-size:large'>}.</span>\n\n<span style='font-size:large'>If </span>$C =[ [u_1]_{\\mathscr{B}_2}... [u_k]_{\\mathscr{B}_2}]$\n\n<span style='font-size:large'>then </span>$[x]_{\\mathscr{B}_2}= C[x]_{\\mathscr{B}_1}$\n","pos":23.5,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"a8b688","input":"<span style='font-size:x-large'>Subspace</span>\n\n<span style='font-size:large'>A subset S of $\\mathbb{R}^3$ is a subspace if S satisfies the following three conditions:</span>\n\n<span style='font-size:large'>\\(a\\) S contains </span><span style='font-size:large'>**0**</span><span style='font-size:large'>, the zero vector.</span>\n\n<span style='font-size:large'>\\(b\\) If </span><span style='font-size:large'>**u**</span><span style='font-size:large'> and </span><span style='font-size:large'>**v**</span><span style='font-size:large'> are in S, then </span><span style='font-size:large'>**u**</span><span style='font-size:large'> \\+ </span><span style='font-size:large'>**v**</span><span style='font-size:large'> is also in S.</span>\n\n<span style='font-size:large'>\\(c\\) If r is a real number and </span><span style='font-size:large'>**u**</span><span style='font-size:large'> is in S, then r</span><span style='font-size:large'>**u**</span><span style='font-size:large'> is also in S. </span>\n\n<span style='font-size:large'>A subset of </span>$\\mathbb{R}^n$<span style='font-size:large'> that satisfies condition \\(b\\) above is said to be</span> <span style='font-size:large'>**closed under addition**</span><span style='font-size:large'>, and if it satisfies condition \\(c\\), then it is </span><span style='font-size:large'>**closed under scalar multiplication**</span><span style='font-size:large'>. Closure under addition and scalar multiplication ensures that arithmetic performed on vectors in a subspace produce other vectors in the subspace.</span>\n\n","pos":1,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"adb109","input":"<span style='font-size:x-large'>Change Basis</span>\n\n<span style='font-size:large'></span>\n\n<span style='font-size:large'>Let x be expressed with respect to the standard basis, and let B ={u1,... , un} be any basis for Rn.</span>\n\n<span style='font-size:large'>\\(a\\) x = U$[x]_B$</span>\n\n<span style='font-size:large'>\\(b) $[x]_B$ = $U^{-1}$x</span>\n\n","pos":17,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"adb561","input":"<span style='font-size:x-large'>Row and Column spaces</span>\n\n<span style='font-size:large'>Let A be an n x m matrix.</span>\n\n<span style='font-size:large'>\\(a\\) The </span><span style='font-size:large'>**row space**</span><span style='font-size:large'> of A is the subspace of </span>$\\mathbb{R}^m$<span style='font-size:large'> spanned by the row vectors of A and is denoted by row\\(A\\).</span>\n\n<span style='font-size:large'>\\(b\\) The </span><span style='font-size:large'>**column space** </span><span style='font-size:large'>of A is the subspace of </span>$\\mathbb{R}^n$<span style='font-size:large'> spanned by the column vectors of A and is denoted by col\\(A\\).</span>\n\n<span style='font-size:large'>Let A be a matrix and B an echelon form of A.</span>\n\n<span style='font-size:large'>\\(a\\) The nonzero rows of B form a basis for row\\(A\\).</span>\n\n<span style='font-size:large'>\\(b\\) The columns of A corresponding to the pivot columns of B form a basis for col\\(A\\).</span>\n\n","pos":15,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"b93200","input":"<span style='font-size:large'>Let </span><span style='font-size:large'>_𝒰_ </span><span style='font-size:large'>= {</span>$u_1$<span style='font-size:large'>, ..., </span>$u_m$<span style='font-size:large'>} be a set of vectors in a subspace</span><span style='font-size:large'> _S_</span><span style='font-size:large'> of dimension k.</span>\n\n<span style='font-size:large'>\\(a\\) If m &lt; k, then </span><span style='font-size:large'>_𝒰_</span><span style='font-size:large'> does not span </span><span style='font-size:large'>_S_</span><span style='font-size:large'>.</span>\n\n<span style='font-size:large'>\\(b\\) If m &gt; k, then </span><span style='font-size:large'>_𝒰_</span><span style='font-size:large'> is not linearly independent.</span>\n","pos":14.9990234375,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"bc1d54","input":"<span style='font-size:large'>Ex. Suppose that </span><span style='font-size:large'>_S_</span><span style='font-size:large'> is a subspace of </span>$\\mathbb{R}^3$<span style='font-size:large'> of dimension 2 containing the vectors in the set </span><img src=\".Zijing Huang Math208 Chapter4.ipynb.upload/paste-0.6971045675807424\"   width=\"172px\"  height=\"86.999px\"  style=\"object-fit:cover\"/>\n\n<span style='font-size:large'>Show that </span><span style='font-size:large'>_𝒰_</span><span style='font-size:large'> is a basis for </span><span style='font-size:large'>_S_</span><span style='font-size:large'>.</span>\n\n","pos":14.9921875,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"be2433","input":"<span style='font-size:large'>This found out that there is no relationship between null space and 3\\-cyclic quiver.</span>\n","pos":31.25,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"c5775c","input":"<span style='font-size:large'>Let </span><span style='font-size:large'>_𝒰_</span><span style='font-size:large'> = {</span>$u_1$<span style='font-size:large'>, ...,</span>$u_m$<span style='font-size:large'>} be a set of vectors in a subspace </span><span style='font-size:large'>_S_</span><span style='font-size:large'> ≠ {0} of </span>$R^n$<span style='font-size:large'>.</span>\n\n<span style='font-size:large'>\\(a\\) If </span><span style='font-size:large'>_𝒰_</span><span style='font-size:large'> is linearly independent, then either </span><span style='font-size:large'>_𝒰_</span><span style='font-size:large'> is a basis for </span><span style='font-size:large'>_S_</span><span style='font-size:large'> or additional vectors can be added to </span><span style='font-size:large'>_𝒰_</span><span style='font-size:large'> to form a basis for </span><span style='font-size:large'>_S_</span><span style='font-size:large'>.</span>\n\n<span style='font-size:large'>\\(b\\) If </span><span style='font-size:large'>_𝒰_</span><span style='font-size:large'> spans </span><span style='font-size:large'>_S_</span><span style='font-size:large'>, then either </span><span style='font-size:large'>_𝒰_</span><span style='font-size:large'> is a basis for </span><span style='font-size:large'>_S_</span><span style='font-size:large'> or vectors can be removed from 𝒰 to form a basis for </span><span style='font-size:large'>_S_</span><span style='font-size:large'>.</span>\n","pos":14.9375,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"c8eb6d","input":"<span style='font-size:x-large'>Dimension</span>\n\n<span style='font-size:large'>If S is a subspace of $R_n$, then every basis of S has the same number of vectors.</span>\n\n<span style='font-size:large'>Let S be a subspace of $R_n$. Then the dimension of S is the number of vectors in any basis of S.</span>\n\n","pos":14.84375,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"d8cb3e","input":"<span style='font-size:xx-large'>Chapter 4</span>\n\n<span style='font-size:x-large'>Introduction to Subspaces</span>\n\n","pos":0,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"e3cb20","input":"<span style='font-size:large'>rank\\(A\\) \\+ nullity\\(A\\) = m.</span>\n","pos":16.5,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"ec129b","input":"<span style='font-size:large'>Let </span>$ℬ_1$<span style='font-size:large'> = {</span>$u_1$<span style='font-size:large'>,… ,</span>$u_m$<span style='font-size:large'>} and $ℬ_2 =$ {</span>$v_1$<span style='font-size:large'>,… ,</span>$v_m$<span style='font-size:large'>} be bases for $\\mathbb{R}^n$. If U = [</span>$u_1$<span style='font-size:large'> … </span>$u_m$<span style='font-size:large'>\\] and V = \\[</span>$v_1$<span style='font-size:large'> … </span>$v_m$<span style='font-size:large'>], then</span>\n\n<span style='font-size:large'>\\(a\\) </span>$[x]_{ℬ_2}$ <span style='font-size:large'>=</span>  $V^{−1}$<span style='font-size:large'>U</span>$[x]_{ℬ_1}$\n\n<span style='font-size:large'>\\(b\\) </span>$[x]_{ℬ_1}$<span style='font-size:large'> = </span>$U^{−1}$<span style='font-size:large'>V</span>$[x]_{ℬ_2}$<span style='font-size:large'> </span>\n\n","pos":22,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"fd9901","input":"<span style='font-size:x-large'>Quiver Matrix</span>\n\n<span style='font-size:large'>We want to fine the relationship between quiver matrix and subspace</span>\n\n","pos":27,"state":"done","type":"cell"}
{"end":1706873701110,"exec_count":120,"id":"782f4d","input":"# All we need to do to show that 𝒰 is a basis for S is verify that 𝒰 is linearly independent or spans S\nA = matrix(QQ,[[1, 3],\n               [2, 7],\n               [0, 1]])\nB = A.echelon_form()\nprint(B)\n# Since the two vectors are not multiples of each other, 𝒰 is a linearly independent set. Hence we can conclude that 𝒰 is a basis for S.\n","kernel":"sage-10.2","output":{"0":{"name":"stdout","text":"[1 0]\n[0 1]\n[0 0]\n"}},"pos":14.99609375,"start":1706873701086,"state":"done","type":"cell"}
{"end":1706878402363,"exec_count":147,"id":"fadeaf","input":"# We start by setting U and V\nU = matrix(QQ,[[1, 2],\n               [3, 7]])\nV = matrix(QQ,[[3, 2],\n               [5, 3]])\nx_B1 = matrix(QQ, [[-1],\n                   [4]])\n# The change of basis matrix from ℬ_1 to ℬ_2 is V^-1*U\nV_inverse = V.inverse()\nchange_of_basis = V_inverse * U\n\n# Use V^-1*U*x_B1 to findx_B2\nchange_of_basis_matrix = matrix(QQ,[[3, 8],\n                                    [-4, -11]])\nx_B2 = change_of_basis_matrix * x_B1\nprint(x_B2)\n\n# Check\n# U*x_B1\nU_xB1 = U * x_B1\n# V*x_B2\nV_xB2 = V * x_B2\nprint(\"Check:\", U_xB1==V_xB2)","kernel":"sage-10.2","output":{"0":{"name":"stdout","text":"[ 29]\n[-40]\nCheck: True\n"}},"pos":23,"start":1706878402351,"state":"done","type":"cell"}
{"end":1706914702100,"exec_count":11,"id":"4b669a","input":"# Define a new matrix A\nA = Matrix(QQ, [[3, -1, 7, -6], \n                [4, -1, 9, -7], \n                [-2, 1, -5, 5]])\n\n# Augment A with the zero vector\naugmented_matrix = A.augment(Matrix(QQ, 3, 1, [0, 0, 0]))\n\n# Perform Gaussian elimination\nreduced_row_echelon_form = augmented_matrix.echelon_form()\n\n# Extract the null space basis vectors\nnull_space_basis = []\nfor row in reduced_row_echelon_form.rows():\n    null_space_basis.append(row[:-1])  # Exclude the last column (the zero vector)\n\nprint(\"Null Space Basis Vectors:\", null_space_basis[0:-1])","kernel":"sage-10.2","output":{"0":{"name":"stdout","text":"Null Space Basis Vectors: [(1, 0, 2, -1), (0, 1, -1, 3)]\n"}},"pos":10,"start":1706914702097,"state":"done","type":"cell"}
{"end":1706915325345,"exec_count":22,"id":"21cc1b","input":"# T(x) = Ax\nA = Matrix(QQ, [[1, -2], \n                [-3, 6], \n                [2, -4]])\n# ker(T) = null(A)\nnull_space_basis = A.right_kernel().basis()\n# The range of T is equal to the span of the columns of A\n# So, we need to find the echelon_form and find the span of the columns of A\nechelon_form = A.rref()\nlinearly_indep_cols = echelon_form.pivots()\nrange = []\nfor i in linearly_indep_cols:\n    range.append(A.transpose()[0])\nprint(\"null space:\")\nprint(null_space_basis)\nprint(\"range:\", range)","kernel":"sage-10.2","output":{"0":{"name":"stdout","text":"null space:\n[\n(1, 1/2)\n]\nrange: [(1, -3, 2)]\n"}},"pos":11.5,"start":1706915325334,"state":"done","type":"cell"}
{"end":1706919428992,"exec_count":25,"id":"f703a9","input":"# Define a 3-dimensional vector space\nV = VectorSpace(QQ, 3)\n\n# Define the vector x\nx = V([3, 4, 4])\n\n# Define the new basis vectors u1, u2, u3\nu1 = V([1, 1, 2])\nu2 = V([0, -3, 1])\nu3 = V([1, 0, 2])\n\n# Letting U be the matrix with columns given by the vectors in ℬ\nU = matrix(QQ,[[1, 1, 2],\n               [0, -3, 1],\n               [1, 0, 2]])\nU_inverse = U.inverse()\nx_B = U_inverse * x\nprint(x_B)","kernel":"sage-10.2","output":{"0":{"name":"stdout","text":"(2, -1, 1)\n"}},"pos":20,"start":1706919428981,"state":"done","type":"cell"}
{"end":1707215112829,"exec_count":3,"id":"b2dfab","input":"# Display a matrix\nA = matrix(QQ,[[1, -2, 3, 0, -1],\n               [2, -4, 7, -3, 3],\n               [3, -6, 8, 3, -8]])\n# Find the echelon form of the matrix\nechelon_form = A.rref()\nlinearly_indep_cols = echelon_form.pivots()\n# Find the number of cols that have pivots\npivot_cols = 0\nfor i in linearly_indep_cols:\n    pivot_cols += 1\n# Find the rank\nrank = pivot_cols\n# m of this matrix is 5\nm = 5\n# Find the nullity of the matrix\nnullity = m - rank\n# nullity = A.right_nullity()\nprint(\"rank:\", rank)\nprint(\"nullity:\", nullity)\n\n# show the quick way\nnullity_quick = A.kernel()\nprint(\"nullity_quick:\", nullity_quick)","kernel":"sage-10.2","output":{"0":{"name":"stdout","text":"rank: 2\nnullity: 3\nnullity_quick: Vector space of degree 3 and dimension 1 over Rational Field\nBasis matrix:\n[   1 -1/5 -1/5]\n"}},"pos":16,"start":1707215112820,"state":"done","type":"cell"}
{"end":1707242876904,"exec_count":1,"id":"345288","input":"# import toEquations from Snigdha's code\n\n#functions\nvar('x y z a c d e')\nxVect = vector([x, y, z, a, c, d, e])\n# Takes in a transposed matrix (matrix[[col][col]].transpose()) and a vector b\n# Throws an exception if b's elements is not equal to A's rows\n# returns a list of equations\ndef toEquations (A, b):\n    if (len(A.rows()) != len(b)):\n        raise Exception(\"A and b don't have the correct number of elements\")\n    print(A, \"x = \", b)\n    print()\n\n    numOfrows = len(A.rows());\n    numOfcols = len(A.columns());\n    equations = []\n    for i in range(numOfrows):\n        equation = \"\"\n        for j in range(numOfcols):\n            equation = equation + \" + \" + str(A[i][j] * xVect[j])\n\n        equation = equation[2:] + \" == \" + str(b[i])\n        equations.append(equation)\n    return equations","kernel":"sage-10.2","pos":-1,"start":1707242876745,"state":"done","type":"cell"}
{"end":1707244147105,"exec_count":21,"id":"01f01c","input":"# Define a 3-dimensional vector space\nV = VectorSpace(RR, 3)\n\nB_1 = matrix(QQ,[[1, -5, 8], [3, -8, 3]]).transpose()\nB_2 = matrix(QQ,[[1, -3, 2], [-1, 2, 1]]).transpose()\n# Find the change of basis matrix from B_1 to B_2 and find x_B2 if x_B1 = [3\n#                                                                          -1]\nx_B1 = vector([3, -1])\nB1_col1 = vector(B_1[:, 0])\n#toEquations takes in a transposed matrix and a vectors and returns a list of corresponding linear equations\nequations = toEquations(B_2, B1_col1); print(\"Generated Equations: \", equations, \"\\n\")\ns = solve([eval(equations[0]), eval(equations[1]), eval(equations[2])], x, y, solution_dict=True)\nc11 = s[0][x]\nc12 = s[0][y]\nprint(\"s = \", s)\nprint(\"c11 = \", c11)\nprint(\"c12 = \", c12)\n\n\nB1_col2 = vector(B_1[:, 1])\nequations = toEquations(B_2, B1_col2); print(\"Generated Equations: \", equations, \"\\n\")\ns = solve([eval(equations[0]), eval(equations[1]), eval(equations[2])], x, y, solution_dict=True)\nc21 = s[0][x]\nc22 = s[0][y]\nprint(\"s = \", s)\nprint(\"c21 = \", c21)\nprint(\"c22 = \", c22)\nprint(s)\n\nC = matrix(QQ,[[c11, c12], [c21, c22]]).transpose()\nprint(C)\n\nx_B2 = C * x_B1\nprint(\"x_B2:\")\nprint(x_B2)","kernel":"sage-10.2","output":{"0":{"name":"stdout","text":"[ 1 -1]\n[-3  2]\n[ 2  1] x =  (1, -5, 8)\n\nGenerated Equations:  [' x + -y == 1', ' -3*x + 2*y == -5', ' 2*x + y == 8'] \n\ns =  [{x: 3, y: 2}]\nc11 =  3\nc12 =  2\n[ 1 -1]\n[-3  2]\n[ 2  1] x =  (3, -8, 3)\n\nGenerated Equations:  [' x + -y == 3', ' -3*x + 2*y == -8', ' 2*x + y == 3'] \n\ns =  [{x: 2, y: -1}]\nc21 =  2\nc22 =  -1\n[{x: 2, y: -1}]\n[ 3  2]\n[ 2 -1]\nx_B2:\n(7, 7)\n"}},"pos":24,"scrolled":false,"start":1707244147071,"state":"done","type":"cell"}
{"end":1707244533332,"exec_count":26,"id":"9b8661","input":"# Since R^3 has dimension 3, we know that 𝒰 does not have enough vectors to be a basis. We can see that the two vectors in 𝒰 are linearly independent, we can expand 𝒰 to a basis of R3. \nA = matrix(QQ,[[1, 3, 1, 0, 0],\n               [1, 2, 0, 1, 0],\n               [-2, -4, 0, 0, 1]])\n# Find Echelon Form\nB = A.echelon_form()\nlinearly_indep_cols = B.pivots()\n# We can find which cols are linearly independent from linearly_indep_cols, which is 0, 1, 3\nbasis_0 = A.transpose()[linearly_indep_cols[0], :]\nbasis_1 = A.transpose()[linearly_indep_cols[1], :]\nbasis_2 = A.transpose()[linearly_indep_cols[2], :]\nprint(\"basis:\")\nprint(basis_0)\nprint(basis_1)\nprint(basis_2)","kernel":"sage-10.2","output":{"0":{"name":"stdout","text":"basis:\n[ 1  1 -2]\n[ 3  2 -4]\n[0 1 0]\n"}},"pos":14.96875,"start":1707244533326,"state":"done","type":"cell"}
{"end":1707244584954,"exec_count":28,"id":"2b1938","input":"A = matrix(QQ,[[1, -2, 7, 5],\n               [-2, -1, -9, -7],\n               [1, 13, -8, -4]])\n# Find the echelon form of the matrix\nB = A.rref()\nrow_pivot = B.pivot_rows()\n# We know that a basis for the row space of A is given by the nonzero rows of B\n# We can find which rows are linearly independent from row_pivot, which is 0, 1\nbasis_0 = B[0, :]\nbasis_1 = B[1, :]\n\nlinearly_indep_cols = B.pivots()\n# We know that a basis for the column space of A is given by the columns of A corresponding to the pivot columns of B\n# We can find which cols are linearly independent from linearly_indep_cols, which is 0, 1\nbasis_00 = A.transpose()[row_pivot[0], :]\nbasis_11 = A.transpose()[row_pivot[1], :]\n\nprint(\"basis for the row space:\")\nprint(basis_0)\nprint(basis_1)\nprint(\"basis for the column space:\")\nprint(basis_00)\nprint(basis_11)","kernel":"sage-10.2","output":{"0":{"name":"stdout","text":"basis for the row space:\n[   1    0    5 19/5]\n[   0    1   -1 -3/5]\nbasis for the column space:\n[ 1 -2  1]\n[-2 -1 13]\n"}},"pos":15.5,"start":1707244584950,"state":"done","type":"cell"}
{"end":1707475761274,"exec_count":10,"id":"2839f6","input":"# Define three-dimensional Euclidean space\nV = VectorSpace(RR, 3)\n\n# Define subspace V1, representing the xy-plane\nV1 = V3.subspace([V([-3, 1, 0]),V([1, -5, 0])])\n\n# Define subspace V2, representing the entire three-dimensional space\nV2 = V\n\n# Verify the conditions\ndim_V1 = V1.dimension()\ndim_V2 = V2.dimension()\n\nprint(f\"dim(V1) = {dim_V1}, dim(V2) = {dim_V2}\")\n\n# Check if dim(V1) <= dim(V2) holds\nassert dim_V1 <= dim_V2, \"dim(V1) is not less than or equal to dim(V2)\"\n\n# Check if dim(V1) = dim(V2) holds\nif dim_V1 == dim_V2:\n    # Check if V1 is equal to V2\n    assert V1 == V2, \"V1 is not equal to V2\"\n\nprint(\"Whether dim_V1 = dim_V2:\", dim_V1 == dim_V2)","kernel":"sage-10.2","output":{"0":{"name":"stdout","text":"dim(V1) = 2, dim(V2) = 3\nWhether dim_V1 = dim_V2: False\n"}},"pos":14.99853515625,"start":1707475761264,"state":"done","type":"cell"}
{"end":1709113711464,"exec_count":3,"id":"39289e","input":"# Define symbolic variables\nk, m = var('k m')\n\n# Given values\nk_value = 4\nm_value = 2  # Number of vectors is fewer than dimension\n\n# Define the vector space\nV = VectorSpace(QQ, k_value)\n\n# Create a set of vectors U with m vectors\nU = [vector(QQ, [i+1 for i in range(k_value)]) for _ in range(m_value)]\n\n# Check if U spans S\nspans_S = V.span(U) == V\n\n# Display results\nresult = f\"If k = {k_value} and m = {m_value}, does U span S? {'Yes' if spans_S else 'No'}\"\n\nprint(result)","kernel":"sage-10.2","output":{"0":{"name":"stdout","text":"If k = 4 and m = 2, does U span S? No\n"}},"pos":14.99951171875,"start":1709113711460,"state":"done","type":"cell"}
{"end":1709113780992,"exec_count":4,"id":"05ca5e","input":"# Define symbolic variables\nk, m = var('k m')\n\n# Given values\nk_value = 3\nm_value = 4  # Number of vectors is more than dimension\n\n# Create a set of vectors U with m vectors\nU = [vector(QQ, [i+1 for i in range(k_value)]) for _ in range(m_value)]\n\n# Create a matrix using the vectors\nmatrix_U = Matrix(U)\n\n# Check if the vectors in U are linearly independent\nlinearly_independent = matrix_U.rank() == len(U)\n\n# Display results\nresult = f\"If k = {k_value} and m = {m_value}, is U linearly independent? {'Yes' if linearly_independent else 'No'}\"\n\nprint(result)","kernel":"sage-10.2","output":{"0":{"name":"stdout","text":"If k = 3 and m = 4, is U linearly independent? No\n"}},"pos":14.999755859375,"start":1709113780914,"state":"done","type":"cell"}
{"end":1709337173684,"exec_count":1,"id":"2410a5","input":"A = Matrix(QQ, [[0, -3, -3, -3], \n                [3, 0, -3, 1], \n                [3, 3, 0, -3], \n                [3, -1, 3, 0]])\nnullity_quick = A.kernel()\nprint(nullity_quick)","kernel":"sage-10.1","output":{"0":{"name":"stdout","text":"Vector space of degree 4 and dimension 0 over Rational Field\nBasis matrix:\n[]\n"}},"pos":29,"start":1709337173394,"state":"done","type":"cell"}
{"end":1709337282352,"exec_count":3,"id":"12a241","input":"A = Matrix(QQ, [[0,-1,0,1],\n                [1,0,1,-1],\n                [0,-1,0,1], \n                [-1,1,1,0]])\nnullity_quick = A.kernel()\nprint(nullity_quick)","kernel":"sage-10.1","output":{"0":{"name":"stdout","text":"Vector space of degree 4 and dimension 1 over Rational Field\nBasis matrix:\n[ 1  0 -1  0]\n"}},"pos":28.5,"start":1709337282179,"state":"done","type":"cell"}
{"exec_count":1,"id":"a097b0","input":"# Display a matrix\nA = matrix(QQ,[[-1, 3, -3, 5],\n               [2, -6, 8, -3],\n               [5, -15, 19, -11],\n               [-1, 3, -5, -2],\n               [-4, 12, -18, -1]])\n# Find Echelon Form\nechelon_form = A.rref()\n# Find the index of pivots\nlinearly_indep_cols = echelon_form.pivots()\nprint(\"The dimension of this matrix:\", len(linearly_indep_cols))","kernel":"sage-10.2","output":{"0":{"name":"stdout","text":"the dimension of this matrix: 2\n"}},"pos":14.875,"state":"done","type":"cell"}
{"exec_count":15,"id":"d55484","input":"# Display a matrix\n# Here u1, u2, u3 are the columns of A\nA = matrix(QQ,[[-1, -6, 4],\n               [2, 7, -3],\n               [3, 5, 1],\n               [1, 2, 0]])\n# Find Echelon Form\nB = A.echelon_form()\n# Find the index of pivots\nlinearly_indep_cols = B.pivots()\n# We can find which cols are linearly independent from linearly_indep_cols, which is 0, 1\nbasis_0 = A.transpose()[row_pivot[0], :]\nbasis_1 = A.transpose()[row_pivot[1], :]\nprint(\"basis:\")\nprint(basis_0)\nprint(basis_1)","kernel":"sage-10.2","output":{"0":{"name":"stdout","text":"basis:\n[-1  2  3  1]\n[-6  7  5  2]\n"}},"pos":14.75,"state":"done","type":"cell"}
{"exec_count":23,"id":"15cd73","input":"# Display a matrix\n# Here u1, u2, u3 are the rows of A.\nA = matrix(QQ,[[-1, -6, 4],\n               [2, 7, -3],\n               [3, 5, 1],\n               [1, 2, 0]])\n# Form the rows of a matrix\nA_row = A.transpose()\n# Find Echelon Form\nB = A_row.rref()\n# Find the basis\nrow_pivot = B.pivot_rows()\nprint(row_pivot)\n\n# We can find which rows are linearly independent from row_pivot, which is 0, 1\nbasis_0 = B[row_pivot[0], :]\nbasis_1 = B[row_pivot[1], :]\nprint(\"basis:\")\nprint(basis_0)\nprint(basis_1)","kernel":"sage-10.2","output":{"0":{"name":"stdout","text":"(0, 1)\nbasis:\n[   1    0 11/5  3/5]\n[   0    1 13/5  4/5]\n"}},"pos":14,"state":"done","type":"cell"}
{"exec_count":3,"id":"9f4fbe","input":"import itertools\n\n# Run this under Python3\n\ndef mutate(M, i):\n    # Return M mutated at vertex i.\n    n = len(M)\n    M_ = [row[::] for row in M]\n    for j in range(len(M)):\n        for k in range(len(M)):\n            if j != k and M[j][i] > 0 and M[i][k] > 0:\n                print(j,k)\n                M_[j][k] += M[j][i] * M[i][k]\n                M_[k][j] -= M[j][i] * M[i][k]\n    for j in range(len(M)):\n        M_[j][i] *= -1\n        M_[i][j] *= -1\n    return M_\n\ndef is_3_cyclic(M):\n    # Returns whether M contains a 3 cycle or not.\n    n = len(M)\n    for (a,b,c) in itertools.permutations(range(n), 3):\n        if M[a][b] > 0 and M[b][c] > 0 and M[c][a] > 0:\n            return True\n    return False\n\ndef is_4_cyclic(M):\n    # Returns whether M contains a 4 cycle or not.\n    n = len(M)\n    for (a,b,c,d) in itertools.permutations(range(n), 4):\n        if M[a][b] > 0 and M[b][c] > 0 and M[c][d] > 0 and M[d][a] > 0:\n            return True\n    return False\n\nfor (a,b,c,d,e,f) in itertools.combinations(range(-10, 11), 6):\n    M = [\n        [0,  a,  b,  c],\n        [-a, 0,  d,  e],\n        [-b, -d, 0,  f],\n        [-c, -e, -f, 0],\n    ]\n","kernel":"python3","pos":28.25,"state":"done","type":"cell"}
{"exec_count":4,"id":"91788c","input":"# Run this under Python3\nM = [[0, -3, -3, -3], [3, 0, -3, 1], [3, 3, 0, -3], [3, -1, 3, 0]]\nprint(is_3_cyclic(M))\nprint(is_4_cyclic(M))","kernel":"python3","output":{"0":{"name":"stdout","text":"True\nFalse\n"}},"pos":29.25,"state":"done","type":"cell"}
{"exec_count":4,"id":"bc2443","input":"A = Matrix(QQ, [[0, -1, 0, 2], \n                [1, 0, 0, -1], \n                [0, 0, 0, 1],\n                [-2, 1, -1, 0]])\n\n# After appling upon theorem:\nA_mutated = Matrix(QQ, [[0, 1, 0,-2], \n                        [-1, 0, -1, 1], \n                        [0, 1, 0, -1],\n                        [2, -1, 1, 0]])\n\n# We want to find the basis for A and A_mutated\nlinearly_indep_cols_A = A.pivots()\nlinearly_indep_cols_A_mutated = A_mutated.pivots()\nbasis_A = A[linearly_indep_cols_A[0], :]\nbasis_A_mutated = A[linearly_indep_cols_A_mutated[0], :]\n\nprint(\"A_mutated:\", A_mutated)\nprint(\"basis_A:\",basis_A)\nprint(\"basis_A_mutated:\" ,basis_A_mutated)\n\n# We can find that their basis are equivalent","kernel":"sage-10.2","output":{"0":{"name":"stdout","text":"A_mutated: [ 0  1  0 -2]\n[-1  0 -1  1]\n[ 0  1  0 -1]\n[ 2 -1  1  0]\nbasis_A: [ 0 -1  0  2]\nbasis_A_mutated: [ 0 -1  0  2]\n"}},"pos":28,"state":"done","type":"cell"}
{"exec_count":8,"id":"e22e24","input":"# Run this under Python3\nM = [[0,-1,0,1],[1,0,1,-1],[0,-1,0,1], [-1,1,1,0]]\nprint(is_3_cyclic(M))\nprint(is_4_cyclic(M))","kernel":"python3","output":{"0":{"name":"stdout","text":"True\nFalse\n"}},"pos":28.625,"state":"done","type":"cell"}
{"id":"f42fee","input":"","pos":33,"state":"done","type":"cell"}
{"id":0,"time":1709859769116,"type":"user"}
{"last_load":1706257422698,"type":"file"}