{"backend_state":"ready","kernel":"sage-10.1","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"last_ipynb_save":1705961577439,"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.11.1"}},"type":"settings"}
{"cell_type":"code","exec_count":12,"id":"ff5fb6","input":"A","output":{"0":{"data":{"text/plain":"[1.00000000000000 + 1.00000000000000*I                      2.00000000000000                      3.00000000000000]\n[                     3.00000000000000                      2.00000000000000                      1.00000000000000]\n[                     1.00000000000000                      1.00000000000000                      1.00000000000000]"},"exec_count":12,"output_type":"execute_result"}},"pos":2,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"4ebc9b","input":"A.is_diagonalizable()\n","output":{"0":{"ename":"ValueError","evalue":"base field must be exact, but Complex Field with 53 bits of precision is not","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","Cell \u001b[0;32mIn [15], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43mA\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mis_diagonalizable\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/ext/sage/10.1/src/sage/matrix/matrix2.pyx:11699\u001b[0m, in \u001b[0;36msage.matrix.matrix2.Matrix.is_diagonalizable\u001b[0;34m()\u001b[0m\n\u001b[1;32m  11697\u001b[0m     raise ValueError('matrix entries must be from a field')\n\u001b[1;32m  11698\u001b[0m if not A.base_ring().is_exact():\n\u001b[0;32m> 11699\u001b[0m     raise ValueError('base field must be exact, but {} is not'.format(A.base_ring()))\n\u001b[1;32m  11700\u001b[0m \n\u001b[1;32m  11701\u001b[0m # check if the sum of algebraic multiplicities equals to the number of rows\n","\u001b[0;31mValueError\u001b[0m: base field must be exact, but Complex Field with 53 bits of precision is not"]}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"b8847c","input":"A = Matrix(QQ, [[1,2,3],[3,2,1],[1,1,1]])","pos":10,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"7ba277","input":"A.diagonalization()","output":{"0":{"data":{"text/plain":"(\n[ 5  0  0]  [    1     1     1]\n[ 0  0  0]  [13/11    -2    -1]\n[ 0  0 -1], [ 6/11     1     0]\n)"},"exec_count":18,"output_type":"execute_result"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"082640","input":"## Hello All!  This is a place we can work on our shared Linear Algebra Tutorial.  What should we put in this document?\n\n## Here is an existing Sage Tutorial in html format. We can use it as a guide to get started: https://doc.sagemath.org/html/en/tutorial/tour_linalg.html\n\n## Here is another example that might be of use:\n\n## https://sites.math.washington.edu//~billey/colombia/sage.code/Algebraic%20Combinatorics%20Tutorial.pdf\n\n","pos":0,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"28d151","input":"","output":{"0":{"ename":"TypeError","evalue":"too many arguments in matrix constructor","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn [21], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m B \u001b[38;5;241m=\u001b[39m \u001b[43mMatrix\u001b[49m\u001b[43m(\u001b[49m\u001b[43m_\u001b[49m\u001b[43m \u001b[49m\u001b[43m,\u001b[49m\u001b[43m[\u001b[49m\u001b[43m[\u001b[49m\u001b[43mInteger\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43mInteger\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m2\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43mInteger\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m3\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\u001b[43m[\u001b[49m\u001b[43mInteger\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m3\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43mInteger\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m2\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43mInteger\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\u001b[43m[\u001b[49m\u001b[43mInteger\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43mInteger\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43mInteger\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m]\u001b[49m\u001b[43m]\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/ext/sage/10.1/src/sage/matrix/constructor.pyx:643\u001b[0m, in \u001b[0;36msage.matrix.constructor.matrix\u001b[0;34m()\u001b[0m\n\u001b[1;32m    641\u001b[0m \"\"\"\n\u001b[1;32m    642\u001b[0m immutable = kwds.pop('immutable', False)\n\u001b[0;32m--> 643\u001b[0m M = MatrixArgs(*args, **kwds).matrix()\n\u001b[1;32m    644\u001b[0m if immutable:\n\u001b[1;32m    645\u001b[0m     M.set_immutable()\n","File \u001b[0;32m/ext/sage/10.1/src/sage/matrix/args.pyx:356\u001b[0m, in \u001b[0;36msage.matrix.args.MatrixArgs.__init__\u001b[0;34m()\u001b[0m\n\u001b[1;32m    354\u001b[0m         if argi == argc: return\n\u001b[1;32m    355\u001b[0m \n\u001b[0;32m--> 356\u001b[0m     raise TypeError(\"too many arguments in matrix constructor\")\n\u001b[1;32m    357\u001b[0m \n\u001b[1;32m    358\u001b[0m def __repr__(self):\n","\u001b[0;31mTypeError\u001b[0m: too many arguments in matrix constructor"]}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":23,"id":"4a7b19","input":"A = Matrix(QQ, [[1,2,3],[3,2,1],[1,1,1]])","pos":1,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"0e5c45","input":"A*A","output":{"0":{"data":{"text/plain":"[10  9  8]\n[10 11 12]\n[ 5  5  5]"},"exec_count":3,"output_type":"execute_result"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"f7a4f2","input":"A.echelon_form()","output":{"0":{"data":{"text/plain":"[ 1  0 -1]\n[ 0  1  2]\n[ 0  0  0]"},"exec_count":4,"output_type":"execute_result"}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"87a3d1","input":"A.det()","output":{"0":{"data":{"text/plain":"0"},"exec_count":5,"output_type":"execute_result"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"864950","input":"A.charpoly()","output":{"0":{"data":{"text/plain":"x^3 - 4*x^2 - 5*x"},"exec_count":6,"output_type":"execute_result"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"6251ab","input":"A.eigenvalues()","output":{"0":{"data":{"text/plain":"[5, 0, -1]"},"exec_count":7,"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"cell_type":"code","id":"d64143","input":"A.","pos":9,"type":"cell"}
{"cell_type":"code","id":"dde248","input":"","pos":14,"type":"cell"}
{"cell_type":"code","id":"f9d97a","input":"","pos":13,"type":"cell"}
{"id":0,"time":1705961564139,"type":"user"}
{"last_load":1705961564329,"type":"file"}