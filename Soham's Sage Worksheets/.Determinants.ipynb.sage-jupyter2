{"backend_state":"ready","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-8fe261f4-85e4-4922-87e1-2cd70b140f0a.json","kernel":"sage-10.1","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"last_ipynb_save":1709865801387,"trust":true,"type":"settings"}
{"cell_type":"code","end":1706908718862,"exec_count":6,"id":"afd31b","input":"var('a11', 'a12', 'a21', 'a22')\nA=matrix(2, 2, [a11, a12, a21, a22])\nprint(A)\nprint(\"det of 2 x 2 \", det(A))","kernel":"sage-10.1","output":{"0":{"name":"stdout","text":"[a11 a12]\n[a21 a22]\ndet of 2 x 2  -a12*a21 + a11*a22\n"}},"pos":6.5,"start":1706908718853,"state":"done","type":"cell"}
{"cell_type":"code","end":1706909393736,"exec_count":9,"id":"e697e1","input":"C=random_matrix(ZZ,4,4)\nC","kernel":"sage-10.1","output":{"0":{"data":{"text/plain":"[ -1   3   0 -29]\n[  1  -1  -1   7]\n[  0   0  -1  -2]\n[  1  -3   1  -1]"},"exec_count":9}},"pos":9,"start":1706909393727,"state":"done","type":"cell"}
{"cell_type":"code","end":1706909394777,"exec_count":10,"id":"07ef5b","input":"D=random_matrix(ZZ,4,4)\nD","kernel":"sage-10.1","output":{"0":{"data":{"text/plain":"[-2 -1  0 -8]\n[ 1 -4 27  1]\n[ 2  0 -1 -4]\n[ 4 -1  3 -3]"},"exec_count":10}},"pos":10,"start":1706909394774,"state":"done","type":"cell"}
{"cell_type":"code","end":1706909396552,"exec_count":11,"id":"95b3bd","input":"# Multiplying the two matrices\nC*D","kernel":"sage-10.1","output":{"0":{"data":{"text/plain":"[-111   18   -6   98]\n[  23   -4   -5  -26]\n[ -10    2   -5   10]\n[  -7   12  -85  -12]"},"exec_count":11}},"pos":11,"start":1706909396547,"state":"done","type":"cell"}
{"cell_type":"code","end":1706909409400,"exec_count":12,"id":"da0022","input":"# Determinant of the product of the two matrices\ndet(C*D)","kernel":"sage-10.1","output":{"0":{"data":{"text/plain":"29376"},"exec_count":12}},"pos":12,"start":1706909409394,"state":"done","type":"cell"}
{"cell_type":"code","end":1706909426257,"exec_count":13,"id":"66d9a1","input":"# Product of the determinants\ndet(C) * det(D)","kernel":"sage-10.1","output":{"0":{"data":{"text/plain":"29376"},"exec_count":13}},"pos":13,"start":1706909426254,"state":"done","type":"cell"}
{"cell_type":"code","end":1706909464579,"exec_count":14,"id":"25eedd","input":"D*C","kernel":"sage-10.1","output":{"0":{"data":{"text/plain":"[  -7   19   -7   59]\n[  -4    4  -22 -112]\n[  -6   18   -3  -52]\n[  -8   22   -5 -126]"},"exec_count":14}},"pos":14,"start":1706909464571,"state":"done","type":"cell"}
{"cell_type":"code","end":1706909471037,"exec_count":15,"id":"95955f","input":"det(D*C)","kernel":"sage-10.1","output":{"0":{"data":{"text/plain":"29376"},"exec_count":15}},"pos":15,"start":1706909471023,"state":"done","type":"cell"}
{"cell_type":"code","end":1706909472940,"exec_count":16,"id":"544f3a","input":"det(D) * det(C)","kernel":"sage-10.1","output":{"0":{"data":{"text/plain":"29376"},"exec_count":16}},"pos":16,"start":1706909472934,"state":"done","type":"cell"}
{"cell_type":"code","end":1706909702201,"exec_count":17,"id":"9d1bea","input":"print(\"det(C+D) = \", det(C + D))\nprint(\"det(C) + det(D) = \", det(C) + det(D))","kernel":"sage-10.1","output":{"0":{"name":"stdout","text":"det(C+D) =  -5430\ndet(C) + det(D) =  -523\n"}},"pos":18,"start":1706909702193,"state":"done","type":"cell"}
{"cell_type":"code","end":1706910802212,"exec_count":21,"id":"f69fdf","input":"var('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')\nA=matrix(3, 3, [a, b, c, d, e, f, g, h, i])\nA","kernel":"sage-10.1","output":{"0":{"data":{"text/plain":"[a b c]\n[d e f]\n[g h i]"},"exec_count":21}},"pos":24,"start":1706910802204,"state":"done","type":"cell"}
{"cell_type":"code","end":1706910803955,"exec_count":22,"id":"d2a991","input":"A.det()","kernel":"sage-10.1","output":{"0":{"data":{"text/plain":"-(f*h - e*i)*a + (c*h - b*i)*d - (c*e - b*f)*g"},"exec_count":22}},"pos":25,"start":1706910803949,"state":"done","type":"cell"}
{"cell_type":"code","end":1706910807226,"exec_count":23,"id":"f354a7","input":"# Matrix representing adding a multiple of row 3 to row 2\nE = elementary_matrix(3, row1 = 1, row2 = 2, scale = 4)\nE","kernel":"sage-10.1","output":{"0":{"data":{"text/plain":"[1 0 0]\n[0 1 4]\n[0 0 1]"},"exec_count":23}},"pos":28,"start":1706910807222,"state":"done","type":"cell"}
{"cell_type":"code","end":1706910809704,"exec_count":24,"id":"01b373","input":"#Effect of multiplying elementary matrix E by A\nE*A","kernel":"sage-10.1","output":{"0":{"data":{"text/plain":"[      a       b       c]\n[d + 4*g e + 4*h f + 4*i]\n[      g       h       i]"},"exec_count":24}},"pos":29,"start":1706910809684,"state":"done","type":"cell"}
{"cell_type":"code","end":1706910850102,"exec_count":25,"id":"ca54f9","input":"# Order of multiplication matters in linear algebra or else we get a completely different effect\nA*E","kernel":"sage-10.1","output":{"0":{"data":{"text/plain":"[      a       b 4*b + c]\n[      d       e 4*e + f]\n[      g       h 4*h + i]"},"exec_count":25}},"pos":30,"start":1706910850072,"state":"done","type":"cell"}
{"cell_type":"code","end":1706911855303,"exec_count":31,"id":"325c57","input":"#Adding a muliple of one row to the other does not change the determinant\nB=random_matrix(ZZ, 3, 3)\nprint(B)\nprint(\"Determinant Before\", det(B))\nE*B\nprint(\"Determinant After Multiplying by elementary matrix\", det(E*B))","kernel":"sage-10.1","output":{"0":{"name":"stdout","text":"[176  18  -1]\n[ -1  -1  -2]\n[  1  -1  -2]\nDeterminant Before -74\nDeterminant After Multiplying by elementary matrix -74\n"}},"pos":31,"start":1706911855295,"state":"done","type":"cell"}
{"cell_type":"code","end":1706912123364,"exec_count":38,"id":"efa4d5","input":"print(B)\nprint(\"Determinant Before\", det(B))\nprint('Matrix after row operation')\nprint(F*B)\nprint(\"Determinant After Multiplying by elementary matrix\", det(F*B))","kernel":"sage-10.1","output":{"0":{"name":"stdout","text":"[176  18  -1]\n[ -1  -1  -2]\n[  1  -1  -2]\nDeterminant Before -74\nMatrix after row operation\n[  1  -1  -2]\n[ -1  -1  -2]\n[176  18  -1]\nDeterminant After Multiplying by elementary matrix 74\n"}},"pos":38,"start":1706912123361,"state":"done","type":"cell"}
{"cell_type":"code","end":1706912246025,"exec_count":39,"id":"51e81b","input":"G=elementary_matrix(3, row1=2, scale=5)\nprint(G)","kernel":"sage-10.1","output":{"0":{"name":"stdout","text":"[1 0 0]\n[0 1 0]\n[0 0 5]\n"}},"pos":42,"start":1706912246018,"state":"done","type":"cell"}
{"cell_type":"code","end":1706912274404,"exec_count":40,"id":"0fbaa5","input":"print(B)\nprint(\"Determinant Before\", det(B))\nprint('Matrix after row operation')\nprint(G*B)\nprint(\"Determinant After Multiplying by elementary matrix\", det(G*B))","kernel":"sage-10.1","output":{"0":{"name":"stdout","text":"[176  18  -1]\n[ -1  -1  -2]\n[  1  -1  -2]\nDeterminant Before -74\nMatrix after row operation\n[176  18  -1]\n[ -1  -1  -2]\n[  5  -5 -10]\nDeterminant After Multiplying by elementary matrix -370\n"}},"pos":43,"start":1706912274401,"state":"done","type":"cell"}
{"cell_type":"code","end":1706912298483,"exec_count":42,"id":"38a725","input":"def myDet(M):\n    if M.ncols() != M.nrows():\n        return(\"not a square matrix so no determinant\")\n    else: \n        col=M.ncols()\n        if col==1: \n            return M[0,0]\n        else:\n            D = 0\n            N=M.matrix_from_columns(range(1,col))\n            for i in range(col):\n                D=D + (-1)^i * M[i,0] * myDet(N.matrix_from_rows(list(range(i)) + list(range(i+1, col))))\n            return D","kernel":"sage-10.1","pos":46,"start":1706912298477,"state":"done","type":"cell"}
{"cell_type":"code","end":1706912300404,"exec_count":43,"id":"873619","input":"A=random_matrix(ZZ, 5,5)","kernel":"sage-10.1","pos":47,"start":1706912300399,"state":"done","type":"cell"}
{"cell_type":"code","end":1706912301965,"exec_count":44,"id":"bedde7","input":"det(A)","kernel":"sage-10.1","output":{"0":{"data":{"text/plain":"147"},"exec_count":44}},"pos":48,"start":1706912301962,"state":"done","type":"cell"}
{"cell_type":"code","end":1706912303385,"exec_count":45,"id":"d44b78","input":"myDet(A)","kernel":"sage-10.1","output":{"0":{"data":{"text/plain":"147"},"exec_count":45}},"pos":49,"start":1706912303371,"state":"done","type":"cell"}
{"cell_type":"code","end":1706912431179,"exec_count":47,"id":"811242","input":"A = Matrix(ZZ, [[3,1,0],[-1,2,1],[0,-1,2]])\nprint(A)","kernel":"sage-10.1","output":{"0":{"name":"stdout","text":"[ 3  1  0]\n[-1  2  1]\n[ 0 -1  2]\n"}},"pos":51,"start":1706912431170,"state":"done","type":"cell"}
{"cell_type":"code","end":1706913110475,"exec_count":51,"id":"ce3d39","input":"B= A.inverse()\nprint(\"A inverse\")\nprint(B)\nprint(\"Determinant of matrix A\", det(A))\nprint(\"Determinant of A inverse\", det(B))\nprint(\"It can be seen that the determinant of the inverse is 1 over the determinant of the original matrix\")","kernel":"sage-10.1","output":{"0":{"name":"stdout","text":"A inverse\n[ 5/17 -2/17  1/17]\n[ 2/17  6/17 -3/17]\n[ 1/17  3/17  7/17]\nDeterminant of matrix A 17\nDeterminant of A inverse 1/17\nIt can be seen that the determinant of the inverse is 1 over the determinant of the original matrix\n"}},"pos":53,"start":1706913110465,"state":"done","type":"cell"}
{"cell_type":"code","end":1706913271877,"exec_count":53,"id":"3b5a22","input":"print(A)\nB= A.transpose()\nprint(\"Transposed Matrix\")\nprint(B)\nprint(\"Original Determinant\", det(A))\nprint(\"Determinant of Transposed Matrix\", det(B))","kernel":"sage-10.1","output":{"0":{"name":"stdout","text":"[ 3  1  0]\n[-1  2  1]\n[ 0 -1  2]\nTransposed Matrix\n[ 3 -1  0]\n[ 1  2 -1]\n[ 0  1  2]\nOriginal Determinant 17\nDeterminant of Transposed Matrix 17\n"}},"pos":59,"start":1706913271869,"state":"done","type":"cell"}
{"cell_type":"code","end":1706915174204,"exec_count":60,"id":"346e54","input":"A=random_matrix(ZZ, 3, 3)\nprint(A)\nprint(\"Determinant of A\", A.det())\nb=matrix(QQ, 3, 1, [5, 3, 7])\nprint(b)\nprint(\"Using the Cramer Rule Calculator We get x=\")\nprint(mysolve(A,b))","kernel":"sage-10.1","output":{"0":{"name":"stdout","text":"[ 2  0  1]\n[ 5 -1 10]\n[ 0  1  0]\nDeterminant of A -15\n[5]\n[3]\n[7]\nUsing the Cramer Rule Calculator We get x=\n[ 8/3]\n[   7]\n[-1/3]\n"}},"pos":67,"start":1706915174202,"state":"done","type":"cell"}
{"cell_type":"code","end":1706916907626,"exec_count":66,"id":"449f33","input":"A=random_matrix(ZZ, 5,5)\nprint(A)\nC=A.adjugate()\nprint(\"Adjugate matrix for A\")\nprint(C)","kernel":"sage-10.1","output":{"0":{"name":"stdout","text":"[-8  0  1 -1 56]\n[ 2  0 -1  0  0]\n[ 1 -2 -2  1  1]\n[-3 -1  1  1  7]\n[ 1  5  2  0 -3]\nAdjugate matrix for A\n[  33 -732  312 -279   69]\n[ -36  474 -294  258 -168]\n[  66 -954  624 -558  138]\n[  32 -138 -192 -286 -134]\n[  -5  -90   30  -35    5]\n"}},"pos":64,"start":1706916907622,"state":"done","type":"cell"}
{"cell_type":"code","end":1706916909930,"exec_count":67,"id":"4e1109","input":"D= 1/(det(A)) * C\nD","kernel":"sage-10.1","output":{"0":{"data":{"text/plain":"[-11/170  122/85  -52/85  93/170 -23/170]\n[   6/85  -79/85   49/85  -43/85   28/85]\n[ -11/85  159/85 -104/85   93/85  -23/85]\n[-16/255   23/85   32/85 143/255  67/255]\n[  1/102    3/17   -1/17   7/102  -1/102]"},"exec_count":67}},"pos":65,"start":1706916909928,"state":"done","type":"cell"}
{"cell_type":"code","end":1706916947468,"exec_count":69,"id":"532771","input":"# We see that the formula holds true\nE = A.inverse()\nE","kernel":"sage-10.1","output":{"0":{"data":{"text/plain":"[-11/170  122/85  -52/85  93/170 -23/170]\n[   6/85  -79/85   49/85  -43/85   28/85]\n[ -11/85  159/85 -104/85   93/85  -23/85]\n[-16/255   23/85   32/85 143/255  67/255]\n[  1/102    3/17   -1/17   7/102  -1/102]"},"exec_count":69}},"pos":66,"start":1706916947465,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"859c5b","input":"","pos":70,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"47f9a0","input":"# Exercise 4 (c): Fill in entries for A and B to find a counterexample.\nA = Matrix(ZZ, [[_, _, _], [_, _, _], [_, _, _]])\nB = Matrix(ZZ, [[_, _, _], [_, _, _], [_, _, _]])\n\nA.determinant() - B.determinant() == (A-B).determinant()","output":{"0":{"ename":"TypeError","evalue":"unable to coerce <class 'sage.matrix.matrix_symbolic_dense.Matrix_symbolic_dense'> to an integer","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn [17], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m# Exercise 4 (c): Fill in entries for A and B to find a counterexample.\u001b[39;00m\n\u001b[0;32m----> 2\u001b[0m A \u001b[38;5;241m=\u001b[39m \u001b[43mMatrix\u001b[49m\u001b[43m(\u001b[49m\u001b[43mZZ\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m[\u001b[49m\u001b[43m[\u001b[49m\u001b[43m_\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m_\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m_\u001b[49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m[\u001b[49m\u001b[43m_\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m_\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m_\u001b[49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m[\u001b[49m\u001b[43m_\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m_\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m_\u001b[49m\u001b[43m]\u001b[49m\u001b[43m]\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m      3\u001b[0m B \u001b[38;5;241m=\u001b[39m Matrix(ZZ, [[_, _, _], [_, _, _], [_, _, _]])\n\u001b[1;32m      5\u001b[0m A\u001b[38;5;241m.\u001b[39mdeterminant() \u001b[38;5;241m-\u001b[39m B\u001b[38;5;241m.\u001b[39mdeterminant() \u001b[38;5;241m==\u001b[39m (A\u001b[38;5;241m-\u001b[39mB)\u001b[38;5;241m.\u001b[39mdeterminant()\n","File \u001b[0;32m/ext/sage/10.1/src/sage/matrix/constructor.pyx:643\u001b[0m, in \u001b[0;36msage.matrix.constructor.matrix\u001b[0;34m()\u001b[0m\n\u001b[1;32m    641\u001b[0m \"\"\"\n\u001b[1;32m    642\u001b[0m immutable = kwds.pop('immutable', False)\n\u001b[0;32m--> 643\u001b[0m M = MatrixArgs(*args, **kwds).matrix()\n\u001b[1;32m    644\u001b[0m if immutable:\n\u001b[1;32m    645\u001b[0m     M.set_immutable()\n","File \u001b[0;32m/ext/sage/10.1/src/sage/matrix/args.pyx:668\u001b[0m, in \u001b[0;36msage.matrix.args.MatrixArgs.matrix\u001b[0;34m()\u001b[0m\n\u001b[1;32m    666\u001b[0m             break\n\u001b[1;32m    667\u001b[0m else:\n\u001b[0;32m--> 668\u001b[0m     M = self.space(self, coerce=convert)\n\u001b[1;32m    669\u001b[0m \n\u001b[1;32m    670\u001b[0m # Also store the matrix to support multiple calls of matrix()\n","File \u001b[0;32m/ext/sage/10.1/src/sage/structure/parent.pyx:903\u001b[0m, in \u001b[0;36msage.structure.parent.Parent.__call__\u001b[0;34m()\u001b[0m\n\u001b[1;32m    901\u001b[0m         return mor._call_(x)\n\u001b[1;32m    902\u001b[0m     else:\n\u001b[0;32m--> 903\u001b[0m         return mor._call_with_args(x, args, kwds)\n\u001b[1;32m    904\u001b[0m \n\u001b[1;32m    905\u001b[0m raise TypeError(_LazyString(\"No conversion defined from %s to %s\", (R, self), {}))\n","File \u001b[0;32m/ext/sage/10.1/src/sage/structure/coerce_maps.pyx:182\u001b[0m, in \u001b[0;36msage.structure.coerce_maps.DefaultConvertMap_unique._call_with_args\u001b[0;34m()\u001b[0m\n\u001b[1;32m    180\u001b[0m     print(type(C), C)\n\u001b[1;32m    181\u001b[0m     print(type(C._element_constructor), C._element_constructor)\n\u001b[0;32m--> 182\u001b[0m raise\n\u001b[1;32m    183\u001b[0m \n\u001b[1;32m    184\u001b[0m \n","File \u001b[0;32m/ext/sage/10.1/src/sage/structure/coerce_maps.pyx:172\u001b[0m, in \u001b[0;36msage.structure.coerce_maps.DefaultConvertMap_unique._call_with_args\u001b[0;34m()\u001b[0m\n\u001b[1;32m    170\u001b[0m         return C._element_constructor(x)\n\u001b[1;32m    171\u001b[0m     else:\n\u001b[0;32m--> 172\u001b[0m         return C._element_constructor(x, **kwds)\n\u001b[1;32m    173\u001b[0m else:\n\u001b[1;32m    174\u001b[0m     if len(kwds) == 0:\n","File \u001b[0;32m/ext/sage/10.1/src/sage/matrix/matrix_space.py:945\u001b[0m, in \u001b[0;36mMatrixSpace._element_constructor_\u001b[0;34m(self, entries, **kwds)\u001b[0m\n\u001b[1;32m    835\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_element_constructor_\u001b[39m(\u001b[38;5;28mself\u001b[39m, entries, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwds):\n\u001b[1;32m    836\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    837\u001b[0m \u001b[38;5;124;03m    Construct an element of ``self`` from ``entries``.\u001b[39;00m\n\u001b[1;32m    838\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    943\u001b[0m \u001b[38;5;124;03m        False\u001b[39;00m\n\u001b[1;32m    944\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m--> 945\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43melement_class\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mentries\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwds\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/ext/sage/10.1/src/sage/matrix/matrix_integer_dense.pyx:309\u001b[0m, in \u001b[0;36msage.matrix.matrix_integer_dense.Matrix_integer_dense.__init__\u001b[0;34m()\u001b[0m\n\u001b[1;32m    307\u001b[0m ma = MatrixArgs_init(parent, entries)\n\u001b[1;32m    308\u001b[0m cdef Integer z\n\u001b[0;32m--> 309\u001b[0m for t in ma.iter(coerce, True):\n\u001b[1;32m    310\u001b[0m     se = <SparseEntry>t\n\u001b[1;32m    311\u001b[0m     z = <Integer>se.entry\n","File \u001b[0;32m/ext/sage/10.1/src/sage/matrix/args.pyx:534\u001b[0m, in \u001b[0;36miter\u001b[0;34m()\u001b[0m\n\u001b[1;32m    532\u001b[0m x = next(it)\n\u001b[1;32m    533\u001b[0m if convert and self.need_to_convert(x):\n\u001b[0;32m--> 534\u001b[0m     x = self.base(x)\n\u001b[1;32m    535\u001b[0m if sparse:\n\u001b[1;32m    536\u001b[0m     yield make_SparseEntry(i, j, x)\n","File \u001b[0;32m/ext/sage/10.1/src/sage/structure/parent.pyx:901\u001b[0m, in \u001b[0;36msage.structure.parent.Parent.__call__\u001b[0;34m()\u001b[0m\n\u001b[1;32m    899\u001b[0m if mor is not None:\n\u001b[1;32m    900\u001b[0m     if no_extra_args:\n\u001b[0;32m--> 901\u001b[0m         return mor._call_(x)\n\u001b[1;32m    902\u001b[0m     else:\n\u001b[1;32m    903\u001b[0m         return mor._call_with_args(x, args, kwds)\n","File \u001b[0;32m/ext/sage/10.1/src/sage/structure/coerce_maps.pyx:163\u001b[0m, in \u001b[0;36msage.structure.coerce_maps.DefaultConvertMap_unique._call_\u001b[0;34m()\u001b[0m\n\u001b[1;32m    161\u001b[0m             print(type(C), C)\n\u001b[1;32m    162\u001b[0m             print(type(C._element_constructor), C._element_constructor)\n\u001b[0;32m--> 163\u001b[0m         raise\n\u001b[1;32m    164\u001b[0m \n\u001b[1;32m    165\u001b[0m cpdef Element _call_with_args(self, x, args=(), kwds={}):\n","File \u001b[0;32m/ext/sage/10.1/src/sage/structure/coerce_maps.pyx:158\u001b[0m, in \u001b[0;36msage.structure.coerce_maps.DefaultConvertMap_unique._call_\u001b[0;34m()\u001b[0m\n\u001b[1;32m    156\u001b[0m cdef Parent C = self._codomain\n\u001b[1;32m    157\u001b[0m try:\n\u001b[0;32m--> 158\u001b[0m     return C._element_constructor(x)\n\u001b[1;32m    159\u001b[0m except Exception:\n\u001b[1;32m    160\u001b[0m     if print_warnings:\n","File \u001b[0;32m/ext/sage/10.1/src/sage/rings/integer.pyx:710\u001b[0m, in \u001b[0;36msage.rings.integer.Integer.__init__\u001b[0;34m()\u001b[0m\n\u001b[1;32m    708\u001b[0m                 return\n\u001b[1;32m    709\u001b[0m \n\u001b[0;32m--> 710\u001b[0m             raise TypeError(\"unable to coerce %s to an integer\" % type(x))\n\u001b[1;32m    711\u001b[0m \n\u001b[1;32m    712\u001b[0m def __reduce__(self):\n","\u001b[0;31mTypeError\u001b[0m: unable to coerce <class 'sage.matrix.matrix_symbolic_dense.Matrix_symbolic_dense'> to an integer"]}},"pos":68,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"dfaf87","input":"A = Matrix(ZZ, [[-3,1,2],[5,5,-8],[4,2,-5]])\nA","output":{"0":{"data":{"text/plain":"[-3  1  2]\n[ 5  5 -8]\n[ 4  2 -5]"},"exec_count":3,"output_type":"execute_result"}},"pos":2,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"fed2ee","input":"A.det()","output":{"0":{"data":{"text/plain":"0"},"exec_count":4,"output_type":"execute_result"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":71,"id":"36f24c","input":"#5.2 Question 41\nfor a in range(-10, 10):\n    for b in range(-10, 10):\n        for c in range(-10, 10):\n            for d in range(-10, 10):\n                A = Matrix(ZZ, [[a,b],[c,d]])\n                # Skip the all zeroes matrix.\n                if a == 0 and b == 0 and c == 0 and d == 0:\n                    continue\n                # In order for this to hold, we need det(A) == 0.\n                if 3*det(A) == det(3*A) and det(A) != 0:\n                    print(\"Example found!\\n\", A)","kernel":"sage-10.1","pos":69,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":8,"id":"a5dfa9","input":"B = Matrix(ZZ, [[4, -1, 1, 0],[1, 7, 3, 5],[0,-3, -2, 1], [2, 4, 8, -1]])\nB","output":{"0":{"data":{"text/plain":"[ 4 -1  1  0]\n[ 1  7  3  5]\n[ 0 -3 -2  1]\n[ 2  4  8 -1]"},"exec_count":8,"output_type":"execute_result"}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"a44102","input":"B.det()","output":{"0":{"data":{"text/plain":"-413"},"exec_count":9,"output_type":"execute_result"}},"pos":5,"type":"cell"}
{"cell_type":"markdown","id":"04e7dd","input":"<span style='font-size:large'>After seeing this neat property of multiplying determinants, it may be tempting to assume that adding determinants work the same way. Namely, that the determinant of the sum of two matrices is the same as the sum of their individual determinants. In math notation, </span>$det(A+B) = det(A)+det(B)$<span style='font-size:large'>. However, this property is not true. Here's an example of when it is not true. </span>\n\n","pos":17,"type":"cell"}
{"cell_type":"markdown","id":"0990b4","input":"","pos":18.8125,"type":"cell"}
{"cell_type":"markdown","id":"0bf96f","input":"## Elementary Matrices\n\n<span style='font-size:large'>Instead of using cofactor expansion to compute the determinant. It is more efficient to convert the matrix to echleon form using row operations and then multiply the terms along the diagnonal</span>\n\n","pos":26.5,"type":"cell"}
{"cell_type":"markdown","id":"0c1471","input":"## Some more properties!\n\n","pos":50,"type":"cell"}
{"cell_type":"markdown","id":"0eccb9","input":"","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"121c22","input":"","pos":26,"type":"cell"}
{"cell_type":"markdown","id":"1b6c4e","input":"","pos":18.625,"type":"cell"}
{"cell_type":"markdown","id":"245f28","input":"### <span style='font-size:large'>Now we are going to look at some interesting properties of Determinants. </span>\n\n## <span style='font-size:medium'>The first property of determinants we are going to look at is regarding multiplying determinants. Multiplying matrices and computing arithmetic operations requires a lot of computation. However, the relationship between the determinant of the product of matrices and the product of their individual determinants, it more simple.</span>\n\n$det(A*B) = det(A) * det(B)$\n\n<span style='font-size:large'>And</span>\n\n$det(B*A) = det(B) * det(A)$\n\n","pos":8,"type":"cell"}
{"cell_type":"markdown","id":"2b7681","input":"","pos":19,"type":"cell"}
{"cell_type":"markdown","id":"3a8fa1","input":"","pos":7,"type":"cell"}
{"cell_type":"markdown","id":"553db8","input":"<span style='font-size:large'>However, there are some instances where this property does hold true. Here is an example:</span>\n","pos":18.25,"type":"cell"}
{"cell_type":"markdown","id":"6791cb","input":"## Determinants Can Also Represent Area\n\n<span style='font-size:medium'>Let T: </span>\n\n","pos":67.625,"type":"cell"}
{"cell_type":"markdown","id":"7433af","input":"## <span style='font-size:medium'>Now here is a function I wrote that represents the recursive nature of finding determinants using cofactor expansion</span>\n\n","pos":45,"type":"cell"}
{"cell_type":"markdown","id":"7fb3eb","input":"### <span style='font-size:large'>Determinants of matrices can be calculated using something called the cofactor expansion method.</span>\n\n<span style='font-size:large'>Here is the formula: </span>\n\n$det(A) = a_{11}C_{11} + a_{12}C_{12} + ...  a_{1n}C_{1n}$\n\n<span style='font-size:large'>Where </span>$C_{11}...C_{1n}$<span style='font-size:large'> are the cofactors of </span>$a_{11}...a_{1n}$<span style='font-size:large'>.</span>\n\n<span style='font-size:large'>We can represent this using an example to see how sage calculates it</span>\n\n","pos":22,"type":"cell"}
{"cell_type":"markdown","id":"80fca8","input":"## Inverses from Determinants\n\n<span style='font-size:large'>In the textbook, we learn that If A is an invertible matrix, then </span>$A^{-1} = \\dfrac{1}{det(A)} * adj(A)$\n\n![](.Determinants.ipynb.upload/paste-0.0817489863038916)\n","pos":62,"type":"cell"}
{"cell_type":"markdown","id":"82b376","input":"","pos":66.5,"type":"cell"}
{"cell_type":"markdown","id":"8b3ded","input":"![](.2024-01-26-notebook-4.ipynb.upload/paste-0.5911853387532666)\n","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"8bfda2","input":"## $A^{T}$has the same Determinant As A\n\n","pos":57,"type":"cell"}
{"cell_type":"markdown","id":"9788fa","input":"#### Let's apply to an example matrix\n\n","pos":6.75,"type":"cell"}
{"cell_type":"markdown","id":"aefc51","input":"## Cramer's Rule\n\n<span style='font-size:large'>Cramer's rule is a formula using determinants that can be used to find the solution to Ax = b where A is an n x n matrix and b is a vector. </span>\n\n<span style='font-size:large'>If A  = \\[</span>$a_1, a_2,...a_n$<span style='font-size:large'>\\] and b is in </span>$R^n$<span style='font-size:large'>, then let </span>$A_i$<span style='font-size:large'> denote the matrix A after replace </span>$a_i$<span style='font-size:large'> with b</span>\n\n![](.Determinants.ipynb.upload/paste-0.19882403853876007)\n","pos":66.125,"type":"cell"}
{"cell_type":"markdown","id":"af4719","input":"## Example Problems\n\n<span style='font-size:large'>A functionality that computers provide is the ability to compute fast. Thus we can use this to our advantage to find examples of certain examples or counterxamples of matrices. Here are some practice problems from the book representing this</span>\n","pos":67.75,"type":"cell"}
{"cell_type":"markdown","id":"b398aa","input":"<span style='font-size:large'>**Chapter 5: Determinants**</span><span style='font-size:large'> </span>\n\n<span style='font-size:large'>By: Soham Bhosale</span>\n\n<span style='font-size:large'>The determinant of a matrix is a single numerical value which is used when calculating the inverse or when solving systems of linear equations. Let's look at some basic examples first.</span>\n\n","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"b8fe5c","input":"<span style='font-size:large'>Determinant of the inverse of a matrix A is </span>$\\dfrac{1}{det(A)}$\n\n","pos":52,"type":"cell"}
{"cell_type":"markdown","id":"b91e63","input":"### The determinants of 2x2 matrices can be generated using a special formula\n\n","pos":5.5,"type":"cell"}
{"cell_type":"markdown","id":"c70172","input":"","pos":23,"type":"cell"}
{"cell_type":"markdown","id":"ce11aa","input":"### Elementary Matrix Switching Rows\n\n<span style='font-size:medium'>The determinant of the matrix produced by interchanging two rows of the original matrix is \\-det\\(B\\)</span>\n\n","pos":36,"type":"cell"}
{"cell_type":"markdown","id":"d1553c","input":"### <span style='font-size:large'>**Multiplying a row by a constant multiplies the determinant by that constnant c**</span>\n\n","pos":40,"type":"cell"}
{"cell_type":"markdown","id":"d54cff","input":"","pos":34,"type":"cell"}
{"cell_type":"markdown","id":"e52c7a","input":"<span style='font-size:large'>First, let's see how elementary matrices change a matrix \\(row\\-operations\\)</span>\n\n<span style='font-size:large'>Remember the three elementary operations are </span>\n\n1. <span style='font-size:large'>Interchanging two rows</span>\n2. <span style='font-size:large'>Multiplying a row by a constant c</span>\n3. <span style='font-size:large'>Adding a mulitple of one row to another</span>\n\n","pos":27,"type":"cell"}
{"cell_type":"markdown","id":"ef8c04","input":"## Affect of Elementary Matrices on the Determinant\n\n<span style='font-size:medium'>Here is the affect of elementary matrices on the Determinant. This table from the textbook does a great job summarizing it. </span>\n\n![](.Determinants.ipynb.upload/paste-0.844915391601256)\n","pos":30.5,"type":"cell"}
{"cell_type":"markdown","id":"fd9a81","input":"#### This property holds commutatively as well!\n\n","pos":13.5,"type":"cell"}
{"end":1706908998889,"exec_count":8,"id":"0432ca","input":"A= random_matrix(ZZ, 2, 2)\nprint(A)\nprint(\"Sage determined determinant of A\" , det(A))\nd = A[0,0]*A[1,1]-A[0,1]*A[1,0]\nprint(\"Determinant calculated by formula \" , d)","kernel":"sage-10.1","output":{"0":{"name":"stdout","text":"[  2  -1]\n[ -2 -11]\nSage determined determinant of A -24\nDeterminant calculated by formula  -24\n"}},"pos":6.8125,"start":1706908998879,"state":"done","type":"cell"}
{"end":1706912092245,"exec_count":35,"id":"af58b8","input":"F=elementary_matrix(3, row1=0, row2=2)\nprint(F)","kernel":"sage-10.1","output":{"0":{"name":"stdout","text":"[0 0 1]\n[0 1 0]\n[1 0 0]\n"}},"pos":37,"start":1706912092239,"state":"done","type":"cell"}
{"end":1706914786049,"exec_count":54,"id":"fe6c16","input":"def mysolve(A, b):\n    \n    if A.nrows()!=A.ncols():\n        return \"first matrix is not a square\"\n    else:\n        if A.det() == 0:\n            return \"first matrix has determinant zero so Cramer's rule does not apply\"\n        else:\n            if b.nrows()!=A.ncols() or b.ncols()!=1:\n                return \"second matrix is not a column matrix of the right side\"\n            else:\n                n=A.ncols()\n                x=matrix(QQ, n, 1)\n                for j in range(n):\n                    Aj=copy(A)\n                    Aj[:,j]=b\n                    x[j] = Aj.det()/A.det()\n                return x","kernel":"sage-10.1","pos":66.25,"start":1706914786045,"state":"done","type":"cell"}
{"end":1706915226172,"exec_count":62,"id":"ee000e","input":"print(\"Using in built in sage functionality we get: \") \nprint(A.solve_right(b))","kernel":"sage-10.1","output":{"0":{"name":"stdout","text":"Using in built in sage functionality we get: \n[ 8/3]\n[   7]\n[-1/3]\n"}},"pos":67.5,"start":1706915226170,"state":"done","type":"cell"}
{"end":1706917601467,"exec_count":70,"id":"735d51","input":"E== D","kernel":"sage-10.1","output":{"0":{"data":{"text/plain":"True"},"exec_count":70}},"pos":66.0625,"start":1706917601461,"state":"done","type":"cell"}
{"id":0,"time":1709859795147,"type":"user"}
{"last_load":1706908040167,"type":"file"}